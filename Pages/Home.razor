@page "/"

<h3>To-Do List</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color:red">@errorMessage</p>
}

<div class="todo-input row">
    <input class="col-lg-2" @bind="newTodoDescription" placeholder="Enter a new to-do" />
    <button @onclick="AddTodo" class="btn btn-primary col-lg-1  ">Add</button>
</div>

<ul>
    @foreach (var todo in sortedTodos)
    {
        <li class="my-3 d-flex align-items-center">
            <input type="checkbox" @bind="todo.IsCompleted" />
            <span class="todo-item col-2" style="@GetTodoStyle(todo)">
                @todo.Description
            </span>
            <button @onclick="() => RemoveTodo(todo)" class="btn btn-danger">Delete</button>
        </li>
    }
</ul>

@code {
    private List<TodoItem> todos = new();
    private string newTodoDescription;
    private string errorMessage;

    private IEnumerable<TodoItem> sortedTodos => todos.OrderBy(t => t.IsCompleted);

    private void AddTodo()
    {
        errorMessage = string.Empty;

        if (string.IsNullOrWhiteSpace(newTodoDescription))
        {
            errorMessage = "Task description is required.";
            return;
        }

        if (todos.Any(t => t.Description.Equals(newTodoDescription, StringComparison.OrdinalIgnoreCase)))
        {
            errorMessage = "This task already exists.";
            return;
        }

        todos.Add(new TodoItem { Description = newTodoDescription, IsCompleted = false });
        newTodoDescription = string.Empty;
        SortTodos();
    }

    private void RemoveTodo(TodoItem todo)
    {
        todos.Remove(todo);
        SortTodos();
    }

    private void SortTodos()
    {
        StateHasChanged(); // Trigger re-rendering of the component
    }

    private string GetTodoStyle(TodoItem todo)
    {
        return todo.IsCompleted ? "text-decoration: line-through;" : string.Empty;
    }

    public class TodoItem
    {
        public string Description { get; set; }
        public bool IsCompleted { get; set; }
    }
}
